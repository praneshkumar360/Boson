statements	: NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement	: KEYWORD:RETURN expr?
			: KEYWORD:CONTINUE
			: KEYWORD:BREAK
			: expr

expr		: KEYWORD:ASSIGN IDENTIFIER EQ expr
			: comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr	: NOT comp-expr
			: bitwise-expr ((EE|LT|GT|LTE|GTE) bitwise-expr)*

bitwise-expr: arith-expr ((BITWISE-AND | BITWISE-OR) arith-expr)*

arith-expr	: term ((PLUS|MINUS) term)*

term		: factor ((MUL|DIV) factor)*

factor		: (PLUS|MINUS) factor
			: (BITEWISE-NOT) factor
			: power

power		: call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom 		: INT|FLOAT|IDENTIFIER
			: LPAREN expr RPAREN
			: list-expr
			: if-expr
			: for-expr
			: while-expr
            : func-def

list-expr	: LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr	    : KEYWORD:IF expr KEYWORD:THEN
			  (statement if-expr-elif | if-expr-else?)
			  | (NEWLINE statements KEYWORD:END | if-expr-elif | if-expr-else)

if-expr-b	: KEYWORD:ELIF expr KEYWORD:THEN
			  (statement if-expr-elif | if-expr-else?)
			  | (NEWLINE statements KEYWORD:END | if-expr-elif | if-expr-else)

if-expr-c	: KEYWORD:ELSE expr statement
			  | (NEWLINE statements KEYWORD:END)

for-expr	: KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
				(KEYWORD:STEP expr)? KEYWORD:THEN 
				statement | (NEWLINE statements KEYWORD:END)

while-expr	: KEYWORD:WHILE expr KEYWORD:THEN
			  statement | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUNC IDENTIFIER? 
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              ARROW expr | (NEWLINE statements KEYWORD:END)

